namespace Shipwreck.ValueFormatters;
<#
var types = new []
{
	typeof(SByte),
	typeof(Byte),
	typeof(Int16),
	typeof(UInt16),
	typeof(Int32),
	typeof(UInt32),
	typeof(Int64),
	typeof(UInt64),
};
#>
<#
foreach (var t in types)
{
#>
public partial struct <#= t.Name #>Wrapper : IEquatable<<#= t.Name #>Wrapper>, IComparable, IComparable<<#= t.Name #>Wrapper>, IConvertible, IFormattable
#if NET6_0_OR_GREATER
    , ISpanFormattable
#endif
{
	public <#= t.Name #>Wrapper(<#= t.Name #> value)
		=> Value = value;
        
    public static <#= t.Name #>Wrapper MinValue => <#= t.Name #>.MinValue;
    public static <#= t.Name #>Wrapper MaxValue => <#= t.Name #>.MaxValue;

	public <#= t.Name #> Value { get; }

    public static implicit operator <#= t.Name #>(<#= t.Name #>Wrapper value)
        => value.Value;

    public static implicit operator <#= t.Name #>Wrapper(<#= t.Name #> value)
        => new(value);

    public static bool operator ==(<#= t.Name #>Wrapper left, <#= t.Name #>Wrapper right)
        => left.Value == right.Value;

    public static bool operator !=(<#= t.Name #>Wrapper left, <#= t.Name #>Wrapper right)
        => left.Value != right.Value;

    public override bool Equals(object obj)
        => obj is <#= t.Name #>Wrapper other && Equals(other);

    public bool Equals(<#= t.Name #>Wrapper other)
        => this == other;

    public override int GetHashCode()
        => Value.GetHashCode();
    
    int IComparable.CompareTo(object obj)
        => Value.CompareTo(((<#= t.Name #>Wrapper)obj).Value);

    public int CompareTo(<#= t.Name #>Wrapper other)
        => Value.CompareTo(other.Value);

    public override string ToString()
        => Value.ToString();
        
    public string ToString(IFormatProvider provider)
        => Value.ToString(provider);
    
    public string ToString(string format)
        => ToString(format, CultureInfo.CurrentCulture);

    public string ToString(string format, IFormatProvider provider)
    {
        if (format?.Length > 0)
        {
            var fs = format.AsSpan();

            var rnf = new RomanNumeralFormatter();
            if (rnf.Supports(1, fs, provider))
            {
                if (rnf.Supports(Value, fs, provider))
                {
                    return rnf.ToString(Value, fs, provider);
                }
                return Value.ToString("D", provider);
            }
        }
        return Value.ToString(format, provider);
    }

    #region IConvertible

    TypeCode IConvertible.GetTypeCode() => Value.GetTypeCode();

    object IConvertible.ToType(Type conversionType, IFormatProvider provider)
    {
        return ((IConvertible)Value).ToType(conversionType, provider);
    }

    decimal IConvertible.ToDecimal(IFormatProvider provider)
        => Value;

    double IConvertible.ToDouble(IFormatProvider provider)
        => Value;

    float IConvertible.ToSingle(IFormatProvider provider)
        => Value;

    bool IConvertible.ToBoolean(IFormatProvider provider)
        => ((IConvertible)Value).ToBoolean(provider);

    char IConvertible.ToChar(IFormatProvider provider) => ((IConvertible)Value).ToChar(provider);

    DateTime IConvertible.ToDateTime(IFormatProvider provider) => ((IConvertible)Value).ToDateTime(provider);

<# 
    foreach (var dt in types)
    { 
#>
    <#= dt.Name #> IConvertible.To<#= dt.Name #>(IFormatProvider provider)
        => checked((<#= dt.Name #>)Value);
<#
    }
#>

    #endregion IConvertible
#if NET6_0_OR_GREATER
    public bool TryFormat (Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider provider)
    {
        if (format.Length > 0)
        {
            var rnf = new RomanNumeralFormatter();
            if (rnf.Supports(1, format, provider))
            {
                if (rnf.Supports(Value, format, provider))
                {
                    rnf.TryFormat(destination,out charsWritten, Value, format, provider);
                    return true;
                }
                return Value.TryFormat(destination, out charsWritten, "D".AsSpan(), provider);
            }
        }
        return Value.TryFormat(destination, out charsWritten, format, provider);
    }
#endif
}
<#
}
#>